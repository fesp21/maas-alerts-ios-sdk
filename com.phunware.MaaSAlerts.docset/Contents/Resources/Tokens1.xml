<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MaaSAlerts.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MaaSAlerts</TokenIdentifier>
			<Abstract type="html">  MaaSAlerts enables easy implementation of alerts and notifications. It encapsulates advanced push features such as subscriber groups and fetching extra information related to a push notification.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/didRegisterForRemoteNotificationsWithDeviceToken:</TokenIdentifier>
			<Abstract type="html">Call inside application:didRegisterForRemoteNotificationsWithDeviceToken:</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)devToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>devToken</Name>
					<Abstract type="html">A token that identifies the device to Apple Push Notification Service (APNS). The token is an opaque data type because that is the form that the provider needs to submit to the APNS servers when it sends a notification to a device. The APNS servers require a binary format for performance reasons.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didRegisterForRemoteNotificationsWithDeviceToken:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/didFailToRegisterForRemoteNotificationsWithError:</TokenIdentifier>
			<Abstract type="html">Call inside application:didFailToRegisterForRemoteNotificationsWithError:</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">An NSError object that encapsulates information why registration did not succeed. The application can display this information to the user.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didFailToRegisterForRemoteNotificationsWithError:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/didReceiveRemoteNotification:</TokenIdentifier>
			<Abstract type="html">Called inside application:didReceiveRemoteNotification:. This method assumes all notifications received were opened by the user and triggers a push analytics payload.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)didReceiveRemoteNotification:(NSDictionary *)userInfo</Declaration>
			<Parameters>
				<Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">A dictionary that contains information related to the remote notification, specifically a badge number for the application icon, a notification identifier, and possibly custom data. The provider originates it as a JSON-defined dictionary that AppKit converts to an NSDictionary object; the dictionary may contain only property-list objects plus NSNull.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didReceiveRemoteNotification:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/didReceiveRemoteNotificationForPushID:</TokenIdentifier>
			<Abstract type="html">Called when you want to explicitly trigger a push analytics event. This method should only be called when the user consumes a push notification.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)didReceiveRemoteNotificationForPushID:(NSString *)pushID</Declaration>
			<Parameters>
				<Parameter>
					<Name>pushID</Name>
					<Abstract type="html">The remote notification push ID. The pushID can be found in the application:didReceiveRemoteNotification: userInfo, `[userInfo objectForKey:@&quot;pid&quot;].</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didReceiveRemoteNotificationForPushID:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/getSubscriptionGroupsWithSuccess:failure:</TokenIdentifier>
			<Abstract type="html">Get subscription groups list. Returns an NSArray of available subscription groups or an NSError object.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)getSubscriptionGroupsWithSuccess:(void ( ^ ) ( NSArray *groups ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getSubscriptionGroupsWithSuccess:success:failure: succeeds. This block has no return value and takes one argument: The groups received from the server, an NSArray object that contains the subscription groups in the following format {@&quot;id&quot; : @&quot;12&quot;, @&quot;description&quot; : @&quot;Subscription group description&quot;}.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getSubscriptionGroupsWithSuccess:success:failure: fails. This block has no return value and takes one argument:, an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getSubscriptionGroupsWithSuccess:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/subscribeToGroupsWithIDs:success:failure:</TokenIdentifier>
			<Abstract type="html">Subscribe to a list of groups.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)subscribeToGroupsWithIDs:(NSArray *)groupIDs success:(void ( ^ ) ( ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>groupIDs</Name>
					<Abstract type="html">An array of 1 or more NSString objects that represent the group IDs that are being subscribed to.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when subscribeToGroupsWithIDs:success:failure: succeeds. This block has no return value and takes no arguments.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when subscribeToGroupsWithIDs:success:failure: fails. This block has no return value and takes one argument:, an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/subscribeToGroupsWithIDs:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/setDevelopmentModeEnabled:</TokenIdentifier>
			<Abstract type="html">Optionally called inside application:didFinishLaunchingWithOptions:. By default your application will use Apple&apos;s production push notification servers. If you would like to use the sandbox push notificiation servers you would call [MaaSAlerts setDevelopmentModeEnabled:YES]. Note that even if development mode is enabled, push notifications will not work in simulator.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)setDevelopmentModeEnabled:(BOOL)enabled</Declaration>
			<Parameters>
				<Parameter>
					<Name>enabled</Name>
					<Abstract type="html">A boolean variable that indicates whether or not push development mode is enabled.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDevelopmentModeEnabled:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/getExtraInformationForPushID:success:failure:</TokenIdentifier>
			<Abstract type="html">Get extra push information associated for the specified push ID.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (void)getExtraInformationForPushID:(NSString *)pushID success:(void ( ^ ) ( NSDictionary *extraInformation ))success failure:(void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>pushID</Name>
					<Abstract type="html">The ID of the push notification for which extra information is requested.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when getExtraInformationForPushID:success:failure: succeeds. This block has no return value and takes one argument: the extra information received from the server. The return object will always be an NSDictionary.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when getExtraInformationForPushID:success:failure: fails. This block has no return value and takes one argument:, an NSError object describing the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getExtraInformationForPushID:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/serviceName</TokenIdentifier>
			<Abstract type="html">Returns &apos;MaaSAlerts&apos;.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)serviceName</Declaration>
			
			
			<Anchor>//api/name/serviceName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/isOptIn</TokenIdentifier>
			<Abstract type="html">Check push opt-in status</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)isOptIn</Declaration>
			
			
			<Anchor>//api/name/isOptIn</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MaaSAlerts/APNSToken</TokenIdentifier>
			<Abstract type="html">Returns Apple push token. Call after didRegisterForRemoteNotificationsWithDeviceToken:. Calling before will return nil.</Abstract>
			<DeclaredIn>MaaSAlerts.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)APNSToken</Declaration>
			
			
			<Anchor>//api/name/APNSToken</Anchor>
		</Token>
		
	</File>
</Tokens>